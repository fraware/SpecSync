name: Lean4 Proof Validation

on:
  pull_request:
    paths:
      - 'specs/**'
      - 'src/**'
  push:
    branches: [main, master]
    paths:
      - 'specs/**'

jobs:
  lean4-proofs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Lean4
      uses: leanprover/setup-lean4@v1
      with:
        version: 'leanprover/lean4:nightly'
    
    - name: Install dependencies
      run: |
        lake update
        lake build
    
    - name: Compile and validate proofs
      run: |
        find specs -name "*.lean" -exec lean --json {} \;
    
    - name: Calculate coverage
      id: coverage
      run: |
        TOTAL=$(find specs -name "*.lean" | wc -l)
        SUCCESS=$(find specs -name "*.lean" -exec lean --json {} \; 2>/dev/null | grep -c "success" || echo 0)
        COVERAGE=$((SUCCESS * 100 / TOTAL))
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
    
    - name: Check coverage threshold
      run: |
        if [ ${{ steps.coverage.outputs.coverage }} -lt 70 ]; then
          echo "Coverage ${{ steps.coverage.outputs.coverage }}% below threshold 70%"
          exit 1
        fi
    
    - name: Generate proof signatures
      if: success()
      run: |
        # Generate Sigstore signatures for successful proofs
        for file in specs/*.lean; do
          if lean --json "$file" >/dev/null 2>&1; then
            echo "Proof validated: $file"
          fi
        done
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const specsDir = 'specs';
          const files = fs.readdirSync(specsDir).filter(f => f.endsWith('.lean'));
          
          let coverage = 0;
          let successCount = 0;
          
          for (const file of files) {
            try {
              const { execSync } = require('child_process');
              execSync(`lean --json ${path.join(specsDir, file)}`, { stdio: 'pipe' });
              successCount++;
            } catch (error) {
              console.log(`Proof failed: ${file}`);
            }
          }
          
          coverage = Math.round((successCount / files.length) * 100);
          
          const comment = `
          ## 🔍 Lean4 Proof Validation Results
          
          **Coverage**: ${coverage}%
          **Successful Proofs**: ${successCount}/${files.length}
          
          ${coverage >= 70 ? '✅' : '❌'} Coverage threshold met
          
          ${coverage < 70 ? '⚠️ **Merge blocked**: Coverage below threshold' : '✅ **Ready to merge**'}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
